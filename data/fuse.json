{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title","getFn":null},{"path":["body"],"id":"body","weight":1,"src":"body","getFn":null}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Bullish Design","n":0.707},"1":{"v":"\n\n\nWelcome to Bullish Design Works - the behind the scenes look into Bullish Design. \n\nThis is an *active* overview of current projects and a repository of documentation for past projects. The site itself is a representation of the Dendron (https://wiki.dendron.so/) vault that holds the thoughts and development that goes on behind the scenes. This is just a spit shined version of what's getting done. \n\nCheck back often to see what's new, what's changed, and what's coming next. ","n":0.114}}},{"i":2,"$":{"0":{"v":"Log","n":1}}},{"i":3,"$":{"0":{"v":"Weekly","n":1}}},{"i":4,"$":{"0":{"v":"22","n":1}}},{"i":5,"$":{"0":{"v":"39","n":1},"1":{"v":"\n\n# Active Projects:\n \n\n# Active Tasks:\n\n\n# Tasks Completed This week:\n\n\n## Monday\n- Finished Creating task/note/code schema templates\n\n\n\n## Tuesday\n\n\n\n## Wednesday\n\n\n## Thursday\n\n\n## Friday\n\n\n## Saturday\n\n\n## Sunday\n\n\n\n# Upcoming Items:\n\n\n\n","n":0.204}}},{"i":6,"$":{"0":{"v":"Tasks","n":1}}},{"i":7,"$":{"0":{"v":"2","n":1},"1":{"v":"\n# Task\nDendron update broke publishing. Need to fix. \n\n# Actions\n-Relaunch to update Dendron to fix? (nope)\n    -Will update and refresh NextJS when home\n-(Later, on main PC) ran update per: https://nextjs.org/blog/next-12-3\n    -\"Update today by running: npm i next@latest\"\n    -Fixed!\n\n# Outcome\nFixed. ","n":0.16}}},{"i":8,"$":{"0":{"v":"1","n":1},"1":{"v":"\n\nTODO Update templates for Weekly Log, Task Note, and Note Note. \n\nWeekly Log:\n\nTO CHANGE. But need to figure out functionality/formatting. And work on that ridiculous multi-layer tree to get to each day. \n\nMaybe have this be more of a passive log? Tracking what was worked on that day by comparing git diffs?\n  - Would need categories for organization. \n    - Examples:\n      - \"1 new project created - 'New project name pulled in here'\"\n      - \"3 new tasks created in 'Corresponding project name pulled in here'\"\n      - \"5 subtasks completed: 'List of tasks given here in link format'\"","n":0.102}}},{"i":9,"$":{"0":{"v":"Notes","n":1}}},{"i":10,"$":{"0":{"v":"1","n":1},"1":{"v":"\nTODO Non-Project note/task templates\n\n# Note\nTODO Test Schema template functionality with wildcards","n":0.302}}},{"i":11,"$":{"0":{"v":"Projects","n":1},"1":{"v":"\n\n# Project List:\n## Index\n\n\n\n\n\nPrevious:\n\n\nProjects\n    - Dendron\n        - Quick add:\n            - Notes\n            - Projects\n            - Tasks\n    - Website (Project 1)\n        - Blog\n        - Store\n        - Social Integrations\n    - Design Workflow (Project 2)\n        - Shapr3d -> 3d Printer (Sub-Project)\n            - Auto Sync Saved Files to Cloud (Task 1)\n            - Trigger -> Bring down saved files (Task 2)\n            - Auto slice on trigger (task 3)\n                - Figure out auto align (Sub Task 1)\n                - If multiple parts need printed, duplicate (Sub Task 2)\n    - Unreal Engine\n    - Product Category #1\n    - Product Category #2\n\n    \n\n\n","n":0.104}}},{"i":12,"$":{"0":{"v":"dendron","n":1},"1":{"v":"\n\nDendron Layout:\n\n    Work (vault 2)\n        Projects\n            Systems\n            NPD Projects\n                Project 1\n                Project 2\n                    Task 1\n                    Task 2\n            Quick Projects\n            Continuation Projects\n        People\n        Log\n            \n\n    Personal (Vault 1)\n        Projects\n            Systems\n                Dendron\n\n                Product Design Process\n            Website\n            Programming\n            etc\n        People\n        Log\n\n\n    Code (Separate Repo - 1 private, 1 public?)\n        Project\n            Code\n\n\nTemplates:\n\n    Next steps:\n        New Project from anywhere\n        New Project as subproject\n        New task from anywhere\n        New Task as subtask\n        Gather subprojects into root project\n            hide/expand\n        Gather subtasks into project\n            hide/expand\n        Parse git diff from yesterday to create a \"what was done\" daily log\n\n    Issues:\n        How to actually set the schema template to trigger?\n            Solved\n\n    Project:\n        Name\n        Description\n        File Save Location\n            Downloads\n            Code\n            Solidworks/Onshape/Shapr3d/Unreal\n        Priority\n\n\n\n    Task:\n        Name\n        Description\n        Identifiable output\n        Task Hierarchy\n            Preceeding task\n            Following task\n\n    Notes:\n        Name\n        Note\n        Tagged Project\n        Tagged Task\n\n    Tags:\n        Project Tag (To tag random things to other projects)\n        Opportunities/Risks/Concerns/Challenges Tags (For notes or tasks to be filtered into other areas)\n        \n\n    Useful Links:\n        Link\n        Description\n        Short Description\n        When used/needed\n\n    People?\n        https://discord.com/channels/717965437182410783/1004110748957548657/1004157684171423855","n":0.079}}},{"i":13,"$":{"0":{"v":"templates","n":1}}},{"i":14,"$":{"0":{"v":"weekly-log","n":1},"1":{"v":"\n\n# Active Projects\n \n\n# Active Tasks\n\n\n# Tasks Completed This week\n\n\n## Monday\n\n\n## Tuesday\n\n\n## Wednesday\n\n\n## Thursday\n\n\n## Friday\n\n\n## Saturday\n\n\n## Sunday\n\n\n\n# Upcoming Items\n\n\n\n","n":0.229}}},{"i":15,"$":{"0":{"v":"solidworks","n":1},"1":{"v":"\n# Solidworks File Location\n\n\n# Properties\n\n\n\n# Features\n\n\n\n# Dimensions\n\n\n\n","n":0.378}}},{"i":16,"$":{"0":{"v":"new-task","n":1},"1":{"v":"\n\n\n# Task Name\n\n# Details:\n## Subject:\n{Subject}\n## From:\n{From}\n# Description/Overview\n## Message:\n{Message}\n# Output/Deliverables\n\n## Description\n\n## Deliverable Save Location\n\n\n# People\n\n","n":0.267}}},{"i":17,"$":{"0":{"v":"new-project","n":1},"1":{"v":"\n\n## Title\n{{ TITLE }}\n\n## Description\n{{ DESC }}\n\n\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.091}}},{"i":18,"$":{"0":{"v":"new-code","n":1},"1":{"v":"\n\n# Automation Name\n\n\n## Functionality\n\n\n## Sub-Functions\n<!-- Overview of any function interplay or broad overviews -->\n\n\n### Sub-Function Name\n<!-- Subfunction description goes here -->\n\n\n","n":0.218}}},{"i":19,"$":{"0":{"v":"CAD","n":1},"1":{"v":"\n\n# File Properties\ntitle:\nCreated By: A.Laureijs\nCreated Date: \nUnits:\n\n\n\n# Skeleton Planes\n<!-- In the format of NewPlaneName:ReferencePlaneForOffset:OffsetDistance -->\nLeftSide_Plane\nRightSide_Plane\nBackSide_Plane\nWorksurfaceTop_Plane\nWorksurfaceBottom_Plane\n\n\n# Skeleton Lines\n<!-- Overview of any function interplay or broad overviews -->\n\n\n### Sub-Function Name\n<!-- Subfunction description goes here -->\n\n\n","n":0.174}}},{"i":20,"$":{"0":{"v":"extensions","n":1},"1":{"v":"\n\n# Dendron Extensions\nA collection of useful extensions for the Dendron application that underlies most all of the work done here.","n":0.224}}},{"i":21,"$":{"0":{"v":"code","n":1},"1":{"v":"\n\n# Coding Extension\n\nMaybe not an extension, per se, but something to allow coding inside of Dendron. Utilize code blocks within .md file, and then have an export functionality to \"reverse\" that. Code blocks become the actual code, and everything else becomes comment blocks. \n\n## Dendron Template Features\n### Frontmatter\n- File Export location\n- Programming language identifier\n\n## Sub-Functions\n### Organize Comment/Uncomment by programming language\n\n### Identify Code Blocks in MD file\n\n### Export File to export location\n\n### Swap code block and comment block","n":0.114}}},{"i":22,"$":{"0":{"v":"Website","n":1},"1":{"v":"\n\n## Title\nWebsite\n\n## Description\n\n\n## Goal\n<!-- What are you trying to accomplish -->\nHaving a simple yet technically detailed collection of work. \n    Example of something to aim for: https://wiki.cci.arts.ac.uk/books/facilities/page/using-the-silver-reed-sk840-knitting-machine\n    \n\n## Context\n<!-- Background information -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n- Dendron organized, separating work and personal\n    Notes:\n        \n- Dendron hooked to blog at github page\n- AHK content creator/logger (\"WorkMode\")\n    - Launches required programs if not open. \n    - Goes by what project/Task is open in Dendron (if it meets project/task requirements)\n    - Floating Icon in bottom right showing task tree, timer updates, notifications, previous/next task, New note button, new task button, big ol done with task button\n    - Tracks interactions (mouse button, highlight, click, log what window, time, active task, active project, etc)\n    - Logs interactions with computer to log file\n- Dendron Actions\n    - New task shortcut\n    - New Project shortcut\n        - project templates option\n    - AHK RMB menu tree \n        - Save to active task as note, \n        - Save as reference for new task\n        - etc (make flexible and modular as possible for easy adaptation later)\n    - Dendron formatting + VS code script to save-as into a properly formatted file with proper file suffix in pre-determined folder location\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n    -https://news.ycombinator.com/item?id=32902520#:~:text=It%27s%20a%20little,it%20very%20badly.\n\n## Lookup\n<!-- relevant prior work or resources -->\n\n\n\n\n\n\n\n\nTasks:\n\n\n\n\nNotes:\n\n\n\n","n":0.06}}},{"i":23,"$":{"0":{"v":"Blog","n":1},"1":{"v":"\n\nTask: Connect Dendron to Github Pages for autoblog v0.1\n\nDesired Outcome:\n\nStatus:\n\nSubtasks:\n\nNotes: ","n":0.316}}},{"i":24,"$":{"0":{"v":"Ideas","n":1},"1":{"v":"\n\n## Index\n- [[Product_List|Projects.Ideas.Product_List]]\n\n","n":0.577}}},{"i":25,"$":{"0":{"v":"Project List","n":0.707},"1":{"v":"\n\n# Projects to Explore\n\n# Design\n## Innovation\nPatent of the day website:\n- Most referenced patent expiring today\n- Do a design overview\n- Show where used and why\n- Dig into inventor and company that created it\n- Profitability, metrics, etc\n- Model in Shapr3d/Onshape\n\nInnovation of the day website:\nUsing the expired patent above, create a new product design:\n-Shapr3d -> Unreal ad renderings\n-Onshape design\n-DFM for various levels of production\n-Quotes\n-Business Plan\n\n## Shapr3d\nLearn\nOffer Tutorials\n\n## Onshape\nLearn\nOffer Tutorials\nOffer \"Transitioning from Solidworks\" user experience makeover\n    - UI skin to make more similar\n    - Build in Standard SW Functions\n    - Build in time saving features\n        - S-button menu\n        - Circle menu thing\n\n## Unreal Engine\nLearn\nOffer tutorials from a product design perspective\n\n\n# Manufacturing\n## CNC Programming in different coordinate systems\nUseful for:\n- 3d Printer Designs\n- Laser Cutter Designs\n\n## Business Processes built on commonly availble \"free\" resources\nPDM/PLM/etc built on:\n-Microsoft online suite\n-Google apps\n-etc\n\n\n# Business \n## Business Types/Understanding\nNever had any entrepenurial training/experience. Just need to understand more.\nFollowup on this: https://www.starterstory.com/explore\n\n## Experiement with online businesses\nProvide as much value as possible for free, expand from there\n\n## Online Product Design Community\nThis, but for physical product design: https://www.starterstory.com/\n-Kickstarter stories, etc.\n\nYoutube version of the above: https://www.screenlace.com/how-asianometry-grew-to-270k-subscribers-on-youtube/\n\n# Programming\n## Android\n### WearOS Expense Tracker\nPress button, spin dial to enter dollar value of expense. Press button to save to Google Sheets\nOptionally add category from preset values - also from google sheet. \n\n## Web Apps\n### How to host a website series (static sites, add comment features, add user logins, then up to web apps)\nBuild up from rasperry pi on local server: https://www.tomshardware.com/how-to/host-public-website-raspberry-pi\n\nThen on to cloud hosting static site (comparison of hosting providers)\n\nThen on to create something similar to what's described here: [[web-clippings\\Deployment and infrastructure for a bootstrapped webapp with 150k monthly visits Caspar von Wrede.md]]\n\nInclude comparisons and affiliate links throughout\n\nBundle into easy to follow instructional guides, build into courses if detailed enough\n\n### Strong.est web app\nStrongman training program based on friendly competition with yourself\n- Drill down into tons of categories so everyone can be the strongest in their category of one. \n- Or compete on various leaderboards\n- Encourage fun videos recording workouts (top sets only) and weekly workout competition videos (all in one go)\n- Find cheap equipment to make scaled workouts\n    - Sandbags for standard equipment (still affordable, sell custom \"hello my name is\" style branded bags/swag - Hello my name is \"worlds strongest middle age father of three with a replacement hip and high cholesterol in the western Delaware region\")\n    - Water jugs, kegs, cardboard boxes, sand filled basketballs, strap farmers carries, strap yoke, SCH 40 pipe, etc.\n\n## AI\n### Set up and play with StableDiffusion (Or similar)\nProduct design inspiration board\nMarketing material inspiration generator\n\n\n# Electronics\n## Computer Interfaces\n### DIY Spacemouse for CAD\nDesktop version\n- Shrink into stick on iPad sized version for Shapr3D and Onshape?\n\n### Custom Keyboards\nSomething like this, but specialized for macros: https://www.tomshardware.com/news/raspberry-pi-pico-keyboard-with-oled-keycaps\n\nSilicone overlay for existing macro keyboards for custom applications\n- iPad app to control the procreate keyboard?","n":0.046}}},{"i":26,"$":{"0":{"v":"Product List","n":0.707},"1":{"v":"\n# Product Idea List\nFormat for list below:\n## Idea Name\nBrief Description\n- Why do it?\n\n# Product Ideas\n## Reel to Reel CNC Fabric Cutter\nFabric roll gets rolled onto \"takeup\" roll, cnc cutter cuts as it goes onto takeup \n-Compact size, takeup roll keeps pieces from falling out of fabric - allow vertical orientation of machine to enable factory operation in small space\n\n## Knockoff Teenage-Engineering Computer Case\nJust to see how much it would cost at various volumes: https://teenage.engineering/products/computer-1\n\nMake it in a different size, with slightly different vibes. Maybe a spot for a glass panel. \n- Quote to show different manufacturing methods, positives/negatives of each, different finishing capabilities, materials, etc. \n\n## Folding Aluminum Motorcycle Luggage\nMuch cheaper shipping. There's no reason for a bike pannier to cost $350. Could offer similar capability at half price, easily. Either flat sheet and customer assembled, or actual folding and some sort of snap open functionality (maybe mounting to the bike locks it together?)\n\nOffer kits to work with major luggage manufacturer brands (givi, sw motech, etc), stay out of the mounting kit itself to minimize sku's and R&D.\n\n\n\n## Knock off Human Hoist Creeper/Chair\nhttps://personalpositioningtechnologies.com/\n\nhttps://patents.google.com/patent/US8777237B2/en\n\n^ Just don't use an actuator. Ropes between front and back axles?\n\n","n":0.072}}},{"i":27,"$":{"0":{"v":"BusinessProcesses","n":1},"1":{"v":"\n\n## Index\n- [[Department Request System|Projects.BusinessProcesses.Department Request System]]\n- [[ECR System|Projects.BusinessProcesses.ECR System]]\n\n","n":0.316}}},{"i":28,"$":{"0":{"v":"ECR System","n":0.707},"1":{"v":"\n\n## Title\nECR System\n\n## Description\n\n\n\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.092}}},{"i":29,"$":{"0":{"v":"Department Request System","n":0.577}}},{"i":30,"$":{"0":{"v":"Business","n":1},"1":{"v":"\n\n## Index\n- [[Planning|Projects.Business.Planning]]\n\n","n":0.577}}},{"i":31,"$":{"0":{"v":"Planning","n":1},"1":{"v":"\n\n# Business Models:\n\n## Customer Development Model\nGo through this presentation, take some notes:\n    https://www.slideshare.net/sblank/customer-development-at-startup2startup?from_action=save\n\n![Customer Development Model - Development Cycle](/assets/images/2022-09-22-10-02-09.png)\n\nMore detailed version - but focused at digital companies/products. How to frame towards physical product development, and build systems and processes around that?\n![CDV - Details](/assets/images/2022-09-22-10-03-45.png)\n\n","n":0.154}}},{"i":32,"$":{"0":{"v":"Automation","n":1},"1":{"v":"\n\nAn overview of various automation projects, some in-process, others still in the planning/dreaming phase. \n\nFeel free to help out or suggest improvements on Github: \n\n\n## Index\n- [[AHK|Projects.Automation.AHK]]","n":0.192}}},{"i":33,"$":{"0":{"v":"Solidworks","n":1},"1":{"v":"\n\n## Title\nSolidworks\n\n## Description\nLight Solidworks automation system to enable quick generation and manipulation of parts/assemblies/drawings. \n\nCurrently working with it just as VBA macros, so limited on I/O. Need to determine modular system to enable flexibiltiy and speed of development. \n\nModular system to enable VBA:\n- Requires Excel Worksheet in order to call/run VBA macro\n    - Can run hidden in background\n    - Can call from python via XLwings?\n    - Can call from AHK\n- standard template folder structure generated/copied from template on initialization:\n    - CSV files:\n        - file properties (name, description, material props, etc.)\n        - Features (sketches, features, etc.)\n        - ASM properties (included parts, mates between features)\n- Store location to specific file in file properties?\n    - macro generates path to specific file from a standard root location\n    - Organized by project, matching PDM folder structure. \n\nFunctions:\n- OnOpen, OnTrigger:\n    - Update SW file from CSV files\n- OnSave:\n    - Update CSV files from SW file\n\n## Goal\n<!-- What are you trying to accomplish -->\n- Generate PRT/ASM/DRW\n- Insert PRT/ASM into PRT/ASM\n- Create sketches with given dimensions\n- Create Features with given dimensions\n\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.06}}},{"i":34,"$":{"0":{"v":"GenerateFile","n":1},"1":{"v":"\n\n## Title\nSolidworks - Generate File\n\n## Description\n\n\n\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.092}}},{"i":35,"$":{"0":{"v":"Python","n":1},"1":{"v":"\n\n\n\n\n## Title\nPython\n\n## Description\n\n\n\n## Goal\n<!-- What are you trying to accomplish -->\n\n\n\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.093}}},{"i":36,"$":{"0":{"v":"Dendron","n":1},"1":{"v":"\n\n## Title\nDendron\n\n## Description\nObject Oriented codebase for Product Development Specific Dendron interactions\n\n\n## Goal\n<!-- What are you trying to accomplish -->\n- Any file can have subfiles (notes, tasks, resources, etc.)\n    - Easy generation of subfiles for each specific type (template) \n        - Generate in context (from current file) and out of context (from project page)\n- All info is easy accessible from a main overview page (tasks, notes, resources, etc. shown in organized fashion at a glance)\n\n\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\nCapabilities:\n- Onsave Actions\n- OnOpen Actions?\n- Parse Frontmatter\n- Frontmatter based actions\n- Autogen Links/indexes\n- Autogen Folders from frontmatter\n- Autoupdate csv/excel files, etc\n- Autogen doc templates\n\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n- Dendron Generate Links\n- Dendron parse file for specific details\n\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.069}}},{"i":37,"$":{"0":{"v":"Tasks","n":1},"1":{"v":"\n\nTODO create Index Template for Tasks and Notes","n":0.354}}},{"i":38,"$":{"0":{"v":"2","n":1}}},{"i":39,"$":{"0":{"v":"1","n":1}}},{"i":40,"$":{"0":{"v":"Notes","n":1},"1":{"v":"\n\ntest","n":1}}},{"i":41,"$":{"0":{"v":"1","n":1},"1":{"v":"\n# Title\nPython Dendron Codebase Outline\n\n# Notes\n\nClasses:\n- Frontmatter\n- Body\n","n":0.354}}},{"i":42,"$":{"0":{"v":"GenerateLinks","n":1},"1":{"v":"\n# Automation Name\nTODO Generate Links for Index\n\n## Functionality\nTrawl all files in tree to create an index of all child indices. Also pull in tasks (choose between active vs non-active tasks?)\n \nCreate an index tree with links to easily go to the necessary file. \n\n\n\n## Sub-Functions\n<!-- Overview of any function interplay or broad overviews -->\n\n### Sub-Function Name\n<!-- Subfunction description goes here -->\n\n\n","n":0.128}}},{"i":43,"$":{"0":{"v":"DendronCodeTemplate","n":1},"1":{"v":"\n# Overview\nTODO Create a python script to transform a \"Code\" Dendron template into properly formatted code.  \n\n\n# Sub-Functions\n<!-- Overview of any function interplay or broad overviews -->\n\n\n## Open File\nDescription: Import a markdown file and store it line by line for later use. \n    Input: Folder Location, Filename\n    Output: File Contents line by line in array\n\n```python\n\ndef read_Dendron_MD_File(mdFile):\n    f = open(mdFile)\n    allLines = f.readlines()\n    returnLines = []\n    for eachLine in allLines:\n        returnLines.append(eachLine) # previously eachLine.strip(), but that removes indentation\n    return returnLines\n\n```\n\n## Code Block/Comment switcheroo\nDescription: Recognize dendron code blocks, turn those into code - everything else turn into comments\n    Input: Array from above, Block comment character start, block comment character end, \n    Functionality: Insert comment character on line 1, Find code block, replace with comment end. Repeat, swapping code open for comment block end and code close to comment block start. \n    Output: Array of lines formatted for functioning as code.\n\n```python\n\ndef convertMDfiletoCode(mdFile, blockCommentStart, blockCommentEnd):\n    mdFileAsArray = read_Dendron_MD_File(mdFile)\n    mdFileAsArray.insert(0,blockCommentStart)\n\n    for i in range(len(mdFileAsArray)):\n        if mdFileAsArray[i].startswith('```python'):\n            mdFileAsArray[i] = blockCommentEnd\n        if mdFileAsArray[i].startswith('```'):\n            mdFileAsArray[i] = blockCommentStart\n    mdFileAsArray.insert(-1, blockCommentEnd)\n    return mdFileAsArray\n\n```\n\n## Save output\nUse template defined \"save\" location to save output file as copy\n\n```python\n\ndef saveArrayToFile(array, fileName):\n    with open(fileName, 'w') as f:\n        for line in array:\n            f.write(\"\".join(line))\n\n\n```\n\n## Recognize frontmatter and extract data to array\nGet code language, file save location, save as name, etc.\n\n```python\n\ndef grabFrontmatter(mdFile):\n    \n\n```\n\n\n## Link to Output\nProvide link to output file to open in VScode or in File Explorer\n\n```python\n\n\n\n```\n\n\n## Language adaptability\nImmediate need for AHK and Python, will need others later\n\nFunction to associate filetype in header to block comment start/end\n\n## Block Import\nAlso copy code blocks into a common code snippet file for each language? \n- And have easy reference to/from this library to make it easier to use/reuse code functions\n\n\n\n\n\n\n\n\n\n\n","n":0.06}}},{"i":44,"$":{"0":{"v":"AHK","n":1},"1":{"v":"\n\n# Dendron macros:\n\n## Note creation helper\nHave a more streamlined interface for creating new notes, instead of just the CTRL+L provided by dendron. Wanting this to just add another incremental note to the collection at current location, though specifiying locations might be good functionality to have. Ideally, the flow would go like this:\n\n    1. Hit keyboard shortcut\n    2. AHK figures out the current file name tree structure, and parses how many notes currently exist there, if any. \n    3. Increments note counter by one, passes filename back to VS Code\n    4. Meanwhile, another little VS Code text insert box pops up asking you what you'd like the task to be named. This goes into the front matter, and becomes a header before the note inserts whatever other schema template is desired. \n    5. Generate the note. \n\nThe end goal would be parsing all the notes to be able to pull them into an index in the main project note location, and being able to link back and forth. \n\n    Functionality pt 2: That means it should also auto-generate the necessary links to go up and down the tree as needed without needing to CTRL-TAB\n \n","n":0.072}}},{"i":45,"$":{"0":{"v":"Send to Dendron","n":0.577},"1":{"v":"\n\n## Title\nCreate AHK connection for Dendron Enhancements\n\n## Description\n\nSystem wide enhancements for Dendron via AutoHotKey. Modular system, easily adaptable based on program/window context. Easily customizable and modifiable. Goal is starting out with a RMB flyout menu to offer some options. Get that working first, then start thinking about context functionality. \n\n## Goal\n<!-- What are you trying to accomplish -->\n\n## Context\n<!-- Related Projects - Ideally build this into an automated \"what's this building on/leading to\" filler spot -->\n\n## Success Criteria\n<!-- milestones for this project -->\n\n## Sub Projects\n<!-- For larger projects, list out sub projects related-->\n- AHK content creator/logger (\"WorkMode\")\n    - Launches required programs if not open. \n    - Goes by what project/Task is open in Dendron (if it meets project/task requirements)\n    - Floating Icon in bottom right showing task tree, timer updates, notifications, previous/next task, New note button, new task button, big ol done with task button\n    - Tracks interactions (mouse button, highlight, click, log what window, time, active task, active project, etc)\n    - Logs interactions with computer to log file\n\n- Dendron Actions\n    - New task shortcut\n    - New Project shortcut\n        - project templates option\n    - AHK RMB menu tree \n        - Save to active task as note, \n        - Save as reference for new task\n        - etc (make flexible and modular as possible for easy adaptation later)\n    - Dendron formatting + VS code script to save-as into a properly formatted file with proper file suffix in pre-determined folder location\n\n\n## Log\n<!-- For longer projects, keep a rough log of major events-->\n\n## Outputs\n<!-- any outputs that were generated from this project. eg. slides, videos, etc-->\n\n<!-- Everything below this line is work needed to achieve the stated goal-->\n\n## Tasks\n<!-- use this space to track current tasks. alternatively, you can also link to your daily journal note -->\n\n## Notes\n<!-- use this space for arbitrary notes -->\n\n## Ideas\n<!-- relevant thoughts, ideas, or resources -->\n\n","n":0.057}}},{"i":46,"$":{"0":{"v":"RMB_Menu","n":1},"1":{"v":"\n\nInvestigate this code from: https://www.autohotkey.com/boards/viewtopic.php?t=38579#p290862\n\n\nHow to use:\nCode: Select all - Expand View - Download - Toggle Line numbers\n\n; « Right Click Mouse Button » –> Context menu opening, then modify it:\n;***********************************************************************\n~RButton::   ; Hook Right Click\n\n; 2 Classes for explorer:\nGlobal Win_Explorer_Class1 := \"ExploreWClass\" ; New Class\nGlobal Win_Explorer_Class2 := \"CabinetWClass\" ; Old Class\n\n; Witch active program is it ?\nWinGetClass, ClassCurrentWindow, A ; Get class of current Window\n\n; Here we need: explorer.exe\nIf ( ClassCurrentWindow = Win_Explorer_Class1 ) or ( ClassCurrentWindow = Win_Explorer_Class2 ) ; 2 classes for explorer\n\tGoto Label_MenuContext_Explorer \n\nReturn ; End of Right Click\n;**************************\n\n\n\nLabel_MenuContext_Explorer: \n;***************************\n\n; Global vars:\nGlobal MenuContext_RightClickAgain := \"-> MenuContext: Right Click Again instead of regular click <-\" \nGlobal MenuContext_NoClicked_AddedItem := \"-> MenuContext: Added items have not been clicked <-\"\nGlobal MenuContext_Separator := \"-> MenuContext: Separator <-\" \nGlobal MenuContext_Item := \"-> MenuContext: Standard Item <-\"\nGlobal MenuContext_Submenu := \"-> MenuContext: Popup Submenu <-\"\n\n;Value of items to add:\nAddItem_Hello1 := \"Hi!\"\nAddItem_Hello2 := \"Bonjour\"\nAddItem_Hello3 := \"Buenos dias\"\nAddItem_Hello4 := \"Hallo\"\nAddItem_Folder := \"Parent's Folder\"\n\n; Position of items in the menu:\nInsertItemsAtPosition := 2 ; Here just after the 1st standard item: 'Open'\n\nArrayToAddItems := { } ; Object as array of items to add into the context menu\n\n; Add items to array:\n\nArrayToAddItems.Push( Fct_MenuContext_Separator() )  ; Separator\n\nArrayToAddItems.Push( Fct_MenuContext_Item( \"Welcome\" ) ) ; Standard item\n\nArrayToAddItems.Push( Fct_MenuContext_Item( AddItem_Folder ) ) ; Standard item\n\nArrayToAddItems.Push( Fct_MenuContext_Separator() ) \n\n;Submenu, with an array of Subitems:\nArrayToAddItems.Push( Fct_MenuContext_Submenu( \"Say Hello\" ; Name of submenu ; And Array of Items:\n\t,[ AddItem_Hello1 \t\t; 1st Item\n\t, MenuContext_Separator \t; Separator...\n\t, AddItem_Hello2\n\t, AddItem_Hello3\n\t, AddItem_Hello4\n\t, \"Test\" ] ) )\n\nArrayToAddItems.Push( Fct_MenuContext_Separator() ) \n\nTargetProgram_Classes := [ Win_Explorer_Class1, Win_Explorer_Class2 ]\n\n\n\n; Function that add the items to the context menu, and return the clicked item\nClickedItem := Fct_Get_ClickedItem_MenuContext_AddedItems( TargetProgram_Classes, InsertItemsAtPosition, ArrayToAddItems* )\n\n\n\nIf ( ClickedItem = MenuContext_RightClickAgain )\n\tGoto Label_MenuContext_Explorer ; When User do right click again, We must rebuild the items \n\nElse If ( ClickedItem = AddItem_Folder ) {\n\tSplitPath, A_ScriptDir, , ParentFolder\n\tRun, %ParentFolder%\n}\n\nElse If ( ClickedItem = MenuContext_NoClicked_AddedItem ) \n\tReturn\n\nElse If ( SubStr( ClickedItem, 1, 2 ) =  \"->\" ) ; Error\n\tReturn\n\nElse If ( ClickedItem = False )\n\tReturn\n\nElse \n\tMsgBox % ClickedItem\n\nReturn ; End Label_Menu_Context_Explorer\n;******\n\n\nDon't forget these tools functions:\nCode: Select all - Expand View - Download - Toggle Line numbers\n\nFct_MenuContext_Separator() {\n\tReturn { Type: MenuContext_Separator }\n}\n\nFct_MenuContext_Item( Name ) {\n\tReturn { Type: MenuContext_Item, Name: Name }\n}\n\nFct_MenuContext_Submenu( Name, ArraySubitems ) {\n\tReturn { Type: MenuContext_SubMenu, Name: Name, Items: ArraySubitems }\n}\n\n\nThe function that add the items to the context menu, and return the clicked item:\nCode: Select all - Expand View - Download - Toggle Line numbers\n\n; Writed by  Nico.Godvician  /  Code Opensource - CC: BY-NC-SA 2.0  –> Copy thsee lines\n; Pubished:  2019/09/21 –> https://www.autohotkey.com/boards/viewtopic.php?f=76&t=38579&p=291014#p290862\n; Function that add the items to the context menu, and return the clicked item\n;*********************************************************************************************************\nFct_Get_ClickedItem_MenuContext_AddedItems( TargetProgram_Classes, InsertItemsAt_Position, ArrayOf_Items* ) \n;**********************************************************************************************************\n{\n\t; Get handle of the target program:\n\tFor each, ProgramClass in TargetProgram_Classes \n\t{\n\t\t; Handle of active window:\n\t\tIf Program_Handle := WinActive( \"ahk_class \" ProgramClass ) ; Handle return false if class it's not active\n\t\t\tBreak ; Program is active, then OK\n\t} ; Or not if the loop ( for each ) is finished\n\t\n\t; Check we are really in the right active program:\n\tIf not Program_Handle ; False or Handle\n\t\tReturn \"-> Not into the right program <-\"\t\n\t\n\t; Class #32768 is for all standard windows context menu:\n\tGlobal MenuContext_AhkClass := \"ahk_class #32768\" \n\t\n\t; Wait context menu appears:\n\tWinWait, %MenuContext_AhkClass% ;\n\t\n\t; Context menu opened –> Get handle:\n\tMN_GETHMENU := 0x1E1 ; Shell Constant: \"Menu_GetHandleMenu\"\n\tSendMessage, MN_GETHMENU, False, False \n\tMenuContext_Handle := ErrorLevel ; Return Handle in ErrorLevel\n\t\n\t\n\t;***************************\n\t; \tSection: Add Items:\n\t;***************************\n\t\n\t; Constants for menus in User32.dll:\n\tStatic MF_SEPARATOR := 0x800\n\tStatic MF_STRING := 0x0\n\tStatic MF_POPUP := 0x10\n\tStatic MF_BYPOSITION := 0x400 \n\t\n\t; Add each new item into the context menu:\n\tFor each, ItemToAdd in ArrayToAdd_Items :=  ArrayOf_Items\n\t{\n\t\t; Save absolut position of this Item in the menu: \n\t\tItemToAdd.Position := InsertItemsAt_Position-1 + A_Index-1 ; Zero based\n\t\t\n\t\t; Add Separator:\n\t\tIf ( ItemToAdd.Type == MenuContext_Separator ) \n\t\t{\n\t\t\t; Insert Separator: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\t\tDllCall( \"User32\\InsertMenu\"\n\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t,\"UInt\", ItemToAdd.Position ; At the specified position\n\t\t\t\t\t,\"UInt\", MF_SEPARATOR + MF_BYPOSITION\n\t\t\t\t\t,\"UPtr\", False\n\t\t\t\t\t,\"UInt\", False )\n\t\t}\n\t\t\n\t\t; Add Classic Item:\n\t\tElse If ( ItemToAdd.Type == MenuContext_Item )\n\t\t{\n\t\t\t; Insert text of item: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\t\tDllCall( \"User32\\InsertMenu\" \n\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t,\"UInt\", ItemToAdd.Position ; At the specified position\n\t\t\t\t\t,\"UInt\", MF_STRING + MF_BYPOSITION\n\t\t\t\t\t,\"UPtr\", False \n\t\t\t\t\t,\"Str\", ItemToAdd.Name ) ; Insert Value ( text )\n\t\t}\n\t\t\n\t\t; Add Submenu and its Subitems:\n\t\tElse If ( ItemToAdd.Type == MenuContext_Submenu )\n\t\t{\n\t\t\tAddSubmenu := ItemToAdd ; Renames to clarify\n\t\t\t; Create Submenu, and return handle:\n\t\t\tAddSubmenu.Handle := DllCall( \"User32\\CreatePopupMenu\" ) \n\t\t\t\n\t\t\t; Insert Submenu into the context menu: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\t\tDllCall( \"User32\\InsertMenu\"\n\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t,\"UInt\", AddSubmenu.Position  ; At the specified position\n\t\t\t\t\t,\"UInt\", MF_STRING + MF_BYPOSITION + MF_POPUP\n\t\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t\t,\"Str\", AddSubmenu.Name )\n\t\t\t\n\t\t\t; Now add each Item and Separator into this Submenu:\n\t\t\tFor each, ItemOfSubmenu in AddSubmenu.Items \n\t\t\t{\n\t\t\t\t; AppendMenu –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-AppendMenuA\n\t\t\t\t\n\t\t\t\t; In case of Separator:\n\t\t\t\tIf ( ItemOfSubmenu == MenuContext_Separator ) \n\t\t\t\t\tDllCall( \"User32\\AppendMenu\"\n\t\t\t\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t\t\t\t,\"UInt\", MF_SEPARATOR\n\t\t\t\t\t\t\t,\"UPtr\", False, \"UInt\", False )\n\t\t\t\t\n\t\t\t\tElse  ; In case of Subintem: insert Value as text:\n\t\t\t\t\tDllCall( \"User32\\AppendMenu\"\n\t\t\t\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t\t\t\t,\"UInt\", MF_STRING\n\t\t\t\t\t\t\t,\"UPtr\", False\n\t\t\t\t\t\t\t,\"Str\", ItemOfSubmenu )\n\t\t\t}\n\t\t}\n\t\tContinue ; Continue to add next item...\n\t}\n\t; End for each add items\n\t\n\t\n\t;***************************\n\t; \tSection: Wait Click:\n\t;***************************\n\t\n\tLabel_Wait_New_Click: ; When User clicks on Separator: wait new click\n\t\n\t; Wait User do a regular or right click:\n\tWhile not GetKeyState( \"LButton\" ) and not GetKeyState( \"RButton\" ) \n\t{\n\t\t; Fix error if 2 right clicks are very too close: menu disappears sometimes for some apps:\n\t\tIf not WinExist( MenuContext_AhkClass ) {\n\t\t\tSend {RButton} \t; Reopen context menu when disappears\n\t\t\tReturn MenuContext_RightClickAgain ; Refill the menu \n\t\t}\n\t}\n\t\n\t; Is it a right click on another file ? This means that the menu is closed and reopening...\n\tIf GetKeyState( \"RButton\" )\n\t\tReturn MenuContext_RightClickAgain ; Then refill the menu\n\t;TODO: Fix error when the User right-clicks on context menu, it's filled up again\n\n\t; Else Yes: Click into an item, but witch item ?\n\t\n\t\n\t;***********************************\n\t; \tSection: Get Clicked Item:\n\t;***********************************\n\t\n\t; Get position of mouse into screen:\n\tCoordMode, Mouse, Screen\n\tMouseGetPos, MouseScreenX, MouseScreenY  ; Int vars: 4 octets\n\t\n\t; POINT –> https://docs.microsoft.com/fr-fr/previous-versions/dd162805(v=vs.85)\n\t; Create a generic C++ POINT{x,y} with a 'ULongLong' –> 'Int64' \n\t; X start at the 1st ULong (right), and Y start at 2nd ULong (32th bit on left):\n\tMousePointScreen := x := MouseScreenX  | y := ( MouseScreenY << 32 ) \n\t\n\t;Calculate DPI of special screen:  1K, 2K, 4K, 8K, etc...\n\tWinDPIMultiplicator := A_ScreenDPI / 96  ; 96 is the standard DPI screen: 1K (1600x900)\n\t\n\t; Check if clicked item is into the new added items:\n\tFor each, AddedItemInMenu in ArrayOfAdded_Items := ArrayOf_Items \n\t{\n\t\t; Click on Separator –> Disable:\n\t\tIf ( AddedItemInMenu.Type == MenuContext_Separator )\n\t\t{\n\t\t\t; Get Rectangle of Separator:\n\t\t\tVarSetCapacity( ItemRectangle, 16, 0 ) ; Create Rectangle of 16 octets: 4 corners of Int (4 octets)\n\t\t\t\n\t\t\t; Fill Rectangle: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"\n\t\t\t\t\t\t\t\t\t,\"UPtr\", Program_Handle\n\t\t\t\t\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t\t\t\t\t,\"UInt\", AddedItemInMenu.Position ; Absolut position in the context menu\n\t\t\t\t\t\t\t\t\t,\"UPtr\", &ItemRectangle )\n\t\t\t; Is clicked on separator ?\n\t\t\tIf isFilledRectangle \n\t\t\tand isPointIntoRectangle := DllCall( \"User32\\PtInRect\", \"UPtr\", &ItemRectangle, \"Int64\", MousePointScreen )\n\t\t\t\tGoto Label_Wait_New_Click \n\t\t}\n\t\t\n\t\t; Click on added Item –> Return Value\n\t\tElse If ( AddedItemInMenu.Type == MenuContext_Item ) \t\t\t\t\t\n\t\t{\n\t\t\tVarSetCapacity( ItemRectangle, 16, 0 )\n\t\t\t; https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"  \n\t\t\t\t\t\t\t\t\t,\"UPtr\", Program_Handle\n\t\t\t\t\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t\t\t\t\t,\"UInt\", AddedItemInMenu.Position \n\t\t\t\t\t\t\t\t\t,\"UPtr\", &ItemRectangle )\n\t\t\tIf isFilledRectangle \n\t\t\tand isPointIntoRectangle := DllCall( \"User32\\PtInRect\", \"UPtr\", &ItemRectangle, \"Int64\", MousePointScreen ) \n\t\t\t\tReturn AddedItemInMenu.Name\n\t\t}\n\t\t\n\t\t; Click on Item of Submenu –> Check each Subitem:\n\t\tElse If ( AddedItemInMenu.Type == MenuContext_Submenu )  \t\t\t\t\n\t\t{\n\t\t\tLoop 3 ; 3 times, because sometimes this function does not work 1 or 2 times:\n\t\t\t\tFor each, ItemInSubmenu in ( ItemIsSubmenu := AddedItemInMenu ).Items \n\t\t\t\t{\n\t\t\t\t\tItemPositionInMenu := A_Index\n\t\t\t\t\t\n\t\t\t\t\t; Get Rectangle for Subitem\n\t\t\t\t\tVarSetCapacity( ItemRectangle, 16, 0 ) \n\t\t\t\t\t; https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\t\t\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"  \n\t\t\t\t\t\t\t\t\t\t\t,\"UPtr\", False ; Indicate Submenu, instead of window\n\t\t\t\t\t\t\t\t\t\t\t,\"UPtr\", ItemIsSubmenu.Handle ; Handle of the Submenu\n\t\t\t\t\t\t\t\t\t\t\t,\"UInt\", ItemPositionInMenu -1 ; Zero based\n\t\t\t\t\t\t\t\t\t\t\t,\"UPtr\", &ItemRectangle )\n\t\t\t\t\t\n\t\t\t\t\t; Get each corner of Rectangle:\n\t\t\t\t\tItemRectangleX1 := NumGet( &ItemRectangle, 0, \"Int\" ) ; Int –> 4 octets\n\t\t\t\t\tItemRectangleY1 := NumGet( &ItemRectangle, 4, \"Int\" )\n\t\t\t\t\tItemRectangleX2 := NumGet( &ItemRectangle, 8, \"Int\" )\n\t\t\t\t\tItemRectangleY2 := NumGet( &ItemRectangle, 12, \"Int\" )\n\t\t\t\t\t\n\t\t\t\t\t; Use DPI multiplicator for special screen (2K, 4K, ...):\n\t\t\t\t\tisMouseInto4Corners :=  ( MouseScreenX >= ItemRectangleX1 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\t\tand ( MouseScreenX <= ItemRectangleX2 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\t\tand ( MouseScreenY >= ItemRectangleY1 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\t\tand ( MouseScreenY <= ItemRectangleY2 *WinDPIMultiplicator ) \n\t\t\t\t\t\n\t\t\t\t\t;ToolTip % \"isFilledRectangle: \" isFilledRectangle \"`n\" \"isMouseInto4Corners: \" isMouseInto4Corners \"`nX: \" ItemRectangleX1*WinDPIMultiplicator \"<\" MouseScreenX \">\" ItemRectangleX2*WinDPIMultiplicator \"`nY: \" ItemRectangleY1*WinDPIMultiplicator \"<\" MouseScreenY \">\" ItemRectangleY2*WinDPIMultiplicator, , , 5\n\t\t\t\t\t\n\t\t\t\t\t; Check if mouse is into this Rectangle: \n\t\t\t\t\tIf isFilledRectangle and isMouseInto4Corners\n\t\t\t\t\t{\n\t\t\t\t\t\t; Click on Separator ?\n\t\t\t\t\t\tIf ( ItemInSubmenu == MenuContext_Separator ) ; Disable Separator:\n\t\t\t\t\t\t\tGoto Label_Wait_New_Click ; Wait new click\n\t\t\t\t\t\t\n\t\t\t\t\t\tElse ; Standard text Subitem: \n\t\t\t\t\t\t\tReturn ItemInSubmenu ; Return value of item\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\t\t; End of one item: this is not this item\n\t\tContinue ; Then check next item...\n\t}\n\t; End: For all the new items, all checked without return\n\t\n\t; Then clicked Item is probably on another item of context menu ( like 'Open' ):\n\tReturn MenuContext_NoClicked_AddedItem\n}\n;End Fct_Get_ClickedItem_MenuContext_AddedItems\n","n":0.027}}},{"i":47,"$":{"0":{"v":"Note Creation Helper","n":0.577},"1":{"v":"\n\n# Automation Name\nNote Creation Helper\n\n## Functionality\nExtend functionality of the included Dendron special notes (https://wiki.dendron.so/notes/5c213aa6-e4ba-49e8-85c5-1bdcb33ce202/) to better fit the product development workflow. \n\n## Sub-Functions\n\n### Call Keyboard Shortcut - Done\nCalls the shortcut for New Task Note, New Project Note\n\nReasoning for the \"keyboard shortcut to keyboard shortcut\" is to have a hook that can be called from other programs/situations\n\nFor now, just have a shortcut that ensures VScode is active window and then calls the note/task shortcut. \n\nNOTE: Make a global macro to focus the vscode window and call the command pallate. \n\nNOTE: VScode spell checker?\n\n- Inputs: Keyboard Shortcuts\n- Outputs: Keyboard Shortcuts\n\n#### Recognize shortcut list\nModular aspect of the above. \"Database\" of different keyboard shortcut inputs and outputs. \n\nWill allow modularity in the future for interaction from other programs/scenarios.\n\n### Grab target file name - Done \nCurrent file name + \".task\" or \".note\" \n\nAHK - current window name? Parsed to find and remove the \".md\"\n\nNOTE: AHK activity logger to keep running log of active VS code windows - this function can provide you with last 3-5 windows to pick which one to use. \n\n\n\n### Remove \".md\", return remainder - Done\nUseful filename modification snippet for ahk\n\n- Inputs: File suffix\n- Outputs: Everything in the file name before the suffix\n\n### Search full file list for index count - check if exists\nCounter = 0\n\nCounter=+1\n\nCheck if Filename.Task.(Counter) exists\n\nIf yes, loop\nIf no, return filename\n\nCreate filename\n\n### Generate new file\nEnsure text in \"create new note\" bar is highlighted\n\nPaste in new note name\n\n### Provide text input for task or note description\nEventually - have this be a VScode input bar at the top of the screen\n\nFor now - ensure the text cursor goes to the right location in the page to type under a header that can be brought up a level \n\n### Add text input to new file\nEventual Goal - Not currently needed (see above)\n\nNOTE: Figure out cleaner formatting for headers - indent each level in the web exported version?\n\nNOTE: Time is always lost when fiddling around with random code changes trying to hunt for bugs. Better off switching to something else and coming back with fresh eyes. \n\nNOTE: Make Dendron Logging Function","n":0.054}}},{"i":48,"$":{"0":{"v":"Tasks","n":1}}},{"i":49,"$":{"0":{"v":"1","n":1},"1":{"v":"\n# Task\nSave Clipboard info and feed back into clipboard when done\n\n","n":0.302}}},{"i":50,"$":{"0":{"v":"Active_Project","n":1}}},{"i":51,"$":{"0":{"v":"Tasks","n":1}}},{"i":52,"$":{"0":{"v":"1","n":1},"1":{"v":"\n# Task Description:\nCreate python script to trawl workspace files and build a CSV of filename/Project Name/Task Name/Save Folder\n\n","n":0.236}}}]}
