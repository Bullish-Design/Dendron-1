{"pageProps":{"note":{"id":"g9zv14g45j01ktu4q8wlg0d","title":"RMB_Menu","desc":"","updated":1663959753843,"created":1663959707298,"custom":{},"fname":"Projects.Automation.AHK.RMB_Menu","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron-1"},"contentHash":"57b4b1762835e2d4be8e1af8d30ef09b","links":[],"anchors":{},"children":[],"parent":"8jtepud2k2y877ns99o5ny8","data":{}},"body":"<h1 id=\"rmb_menu\">RMB_Menu<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rmb_menu\"></a></h1>\n<p>Investigate this code from: <a href=\"https://www.autohotkey.com/boards/viewtopic.php?t=38579#p290862\">https://www.autohotkey.com/boards/viewtopic.php?t=38579#p290862</a></p>\n<p>How to use:\nCode: Select all - Expand View - Download - Toggle Line numbers</p>\n<p>; « Right Click Mouse Button » –> Context menu opening, then modify it:\n;<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>\n~RButton::   ; Hook Right Click</p>\n<p>; 2 Classes for explorer:\nGlobal Win_Explorer_Class1 := \"ExploreWClass\" ; New Class\nGlobal Win_Explorer_Class2 := \"CabinetWClass\" ; Old Class</p>\n<p>; Witch active program is it ?\nWinGetClass, ClassCurrentWindow, A ; Get class of current Window</p>\n<p>; Here we need: explorer.exe\nIf ( ClassCurrentWindow = Win_Explorer_Class1 ) or ( ClassCurrentWindow = Win_Explorer_Class2 ) ; 2 classes for explorer\nGoto Label_MenuContext_Explorer </p>\n<p>Return ; End of Right Click\n;<strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></p>\n<p>Label_MenuContext_Explorer:\n;<strong><strong><strong><strong><strong><strong>***</strong></strong></strong></strong></strong></strong></p>\n<p>; Global vars:\nGlobal MenuContext_RightClickAgain := \"-> MenuContext: Right Click Again instead of regular click &#x3C;-\"\nGlobal MenuContext_NoClicked_AddedItem := \"-> MenuContext: Added items have not been clicked &#x3C;-\"\nGlobal MenuContext_Separator := \"-> MenuContext: Separator &#x3C;-\"\nGlobal MenuContext_Item := \"-> MenuContext: Standard Item &#x3C;-\"\nGlobal MenuContext_Submenu := \"-> MenuContext: Popup Submenu &#x3C;-\"</p>\n<p>;Value of items to add:\nAddItem_Hello1 := \"Hi!\"\nAddItem_Hello2 := \"Bonjour\"\nAddItem_Hello3 := \"Buenos dias\"\nAddItem_Hello4 := \"Hallo\"\nAddItem_Folder := \"Parent's Folder\"</p>\n<p>; Position of items in the menu:\nInsertItemsAtPosition := 2 ; Here just after the 1st standard item: 'Open'</p>\n<p>ArrayToAddItems := { } ; Object as array of items to add into the context menu</p>\n<p>; Add items to array:</p>\n<p>ArrayToAddItems.Push( Fct_MenuContext_Separator() )  ; Separator</p>\n<p>ArrayToAddItems.Push( Fct_MenuContext_Item( \"Welcome\" ) ) ; Standard item</p>\n<p>ArrayToAddItems.Push( Fct_MenuContext_Item( AddItem_Folder ) ) ; Standard item</p>\n<p>ArrayToAddItems.Push( Fct_MenuContext_Separator() ) </p>\n<p>;Submenu, with an array of Subitems:\nArrayToAddItems.Push( Fct_MenuContext_Submenu( \"Say Hello\" ; Name of submenu ; And Array of Items:\n,[ AddItem_Hello1 \t\t; 1st Item\n, MenuContext_Separator \t; Separator...\n, AddItem_Hello2\n, AddItem_Hello3\n, AddItem_Hello4\n, \"Test\" ] ) )</p>\n<p>ArrayToAddItems.Push( Fct_MenuContext_Separator() ) </p>\n<p>TargetProgram_Classes := [ Win_Explorer_Class1, Win_Explorer_Class2 ]</p>\n<p>; Function that add the items to the context menu, and return the clicked item\nClickedItem := Fct_Get_ClickedItem_MenuContext_AddedItems( TargetProgram_Classes, InsertItemsAtPosition, ArrayToAddItems* )</p>\n<p>If ( ClickedItem = MenuContext_RightClickAgain )\nGoto Label_MenuContext_Explorer ; When User do right click again, We must rebuild the items </p>\n<p>Else If ( ClickedItem = AddItem_Folder ) {\nSplitPath, A_ScriptDir, , ParentFolder\nRun, %ParentFolder%\n}</p>\n<p>Else If ( ClickedItem = MenuContext_NoClicked_AddedItem )\nReturn</p>\n<p>Else If ( SubStr( ClickedItem, 1, 2 ) =  \"->\" ) ; Error\nReturn</p>\n<p>Else If ( ClickedItem = False )\nReturn</p>\n<p>Else\nMsgBox % ClickedItem</p>\n<p>Return ; End Label_Menu_Context_Explorer\n;<strong>**</strong></p>\n<p>Don't forget these tools functions:\nCode: Select all - Expand View - Download - Toggle Line numbers</p>\n<p>Fct_MenuContext_Separator() {\nReturn { Type: MenuContext_Separator }\n}</p>\n<p>Fct_MenuContext_Item( Name ) {\nReturn { Type: MenuContext_Item, Name: Name }\n}</p>\n<p>Fct_MenuContext_Submenu( Name, ArraySubitems ) {\nReturn { Type: MenuContext_SubMenu, Name: Name, Items: ArraySubitems }\n}</p>\n<p>The function that add the items to the context menu, and return the clicked item:\nCode: Select all - Expand View - Download - Toggle Line numbers</p>\n<p>; Writed by  Nico.Godvician  /  Code Opensource - CC: BY-NC-SA 2.0  –> Copy thsee lines\n; Pubished:  2019/09/21 –> <a href=\"https://www.autohotkey.com/boards/viewtopic.php?f=76&#x26;t=38579&#x26;p=291014#p290862\">https://www.autohotkey.com/boards/viewtopic.php?f=76&#x26;t=38579&#x26;p=291014#p290862</a>\n; Function that add the items to the context menu, and return the clicked item\n;<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>*</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>\nFct_Get_ClickedItem_MenuContext_AddedItems( TargetProgram_Classes, InsertItemsAt_Position, ArrayOf_Items* )\n;<strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong><strong>**</strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong></strong>\n{\n; Get handle of the target program:\nFor each, ProgramClass in TargetProgram_Classes\n{\n; Handle of active window:\nIf Program_Handle := WinActive( \"ahk_class \" ProgramClass ) ; Handle return false if class it's not active\nBreak ; Program is active, then OK\n} ; Or not if the loop ( for each ) is finished</p>\n<pre><code>; Check we are really in the right active program:\nIf not Program_Handle ; False or Handle\n\tReturn \"-> Not into the right program &#x3C;-\"\t\n\n; Class #32768 is for all standard windows context menu:\nGlobal MenuContext_AhkClass := \"ahk_class #32768\" \n\n; Wait context menu appears:\nWinWait, %MenuContext_AhkClass% ;\n\n; Context menu opened –> Get handle:\nMN_GETHMENU := 0x1E1 ; Shell Constant: \"Menu_GetHandleMenu\"\nSendMessage, MN_GETHMENU, False, False \nMenuContext_Handle := ErrorLevel ; Return Handle in ErrorLevel\n\n\n;***************************\n; \tSection: Add Items:\n;***************************\n\n; Constants for menus in User32.dll:\nStatic MF_SEPARATOR := 0x800\nStatic MF_STRING := 0x0\nStatic MF_POPUP := 0x10\nStatic MF_BYPOSITION := 0x400 \n\n; Add each new item into the context menu:\nFor each, ItemToAdd in ArrayToAdd_Items :=  ArrayOf_Items\n{\n\t; Save absolut position of this Item in the menu: \n\tItemToAdd.Position := InsertItemsAt_Position-1 + A_Index-1 ; Zero based\n\t\n\t; Add Separator:\n\tIf ( ItemToAdd.Type == MenuContext_Separator ) \n\t{\n\t\t; Insert Separator: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\tDllCall( \"User32\\InsertMenu\"\n\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t,\"UInt\", ItemToAdd.Position ; At the specified position\n\t\t\t\t,\"UInt\", MF_SEPARATOR + MF_BYPOSITION\n\t\t\t\t,\"UPtr\", False\n\t\t\t\t,\"UInt\", False )\n\t}\n\t\n\t; Add Classic Item:\n\tElse If ( ItemToAdd.Type == MenuContext_Item )\n\t{\n\t\t; Insert text of item: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\tDllCall( \"User32\\InsertMenu\" \n\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t,\"UInt\", ItemToAdd.Position ; At the specified position\n\t\t\t\t,\"UInt\", MF_STRING + MF_BYPOSITION\n\t\t\t\t,\"UPtr\", False \n\t\t\t\t,\"Str\", ItemToAdd.Name ) ; Insert Value ( text )\n\t}\n\t\n\t; Add Submenu and its Subitems:\n\tElse If ( ItemToAdd.Type == MenuContext_Submenu )\n\t{\n\t\tAddSubmenu := ItemToAdd ; Renames to clarify\n\t\t; Create Submenu, and return handle:\n\t\tAddSubmenu.Handle := DllCall( \"User32\\CreatePopupMenu\" ) \n\t\t\n\t\t; Insert Submenu into the context menu: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-InsertMenuA\n\t\tDllCall( \"User32\\InsertMenu\"\n\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t,\"UInt\", AddSubmenu.Position  ; At the specified position\n\t\t\t\t,\"UInt\", MF_STRING + MF_BYPOSITION + MF_POPUP\n\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t,\"Str\", AddSubmenu.Name )\n\t\t\n\t\t; Now add each Item and Separator into this Submenu:\n\t\tFor each, ItemOfSubmenu in AddSubmenu.Items \n\t\t{\n\t\t\t; AppendMenu –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-AppendMenuA\n\t\t\t\n\t\t\t; In case of Separator:\n\t\t\tIf ( ItemOfSubmenu == MenuContext_Separator ) \n\t\t\t\tDllCall( \"User32\\AppendMenu\"\n\t\t\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t\t\t,\"UInt\", MF_SEPARATOR\n\t\t\t\t\t\t,\"UPtr\", False, \"UInt\", False )\n\t\t\t\n\t\t\tElse  ; In case of Subintem: insert Value as text:\n\t\t\t\tDllCall( \"User32\\AppendMenu\"\n\t\t\t\t\t\t,\"UPtr\", AddSubmenu.Handle\n\t\t\t\t\t\t,\"UInt\", MF_STRING\n\t\t\t\t\t\t,\"UPtr\", False\n\t\t\t\t\t\t,\"Str\", ItemOfSubmenu )\n\t\t}\n\t}\n\tContinue ; Continue to add next item...\n}\n; End for each add items\n\n\n;***************************\n; \tSection: Wait Click:\n;***************************\n\nLabel_Wait_New_Click: ; When User clicks on Separator: wait new click\n\n; Wait User do a regular or right click:\nWhile not GetKeyState( \"LButton\" ) and not GetKeyState( \"RButton\" ) \n{\n\t; Fix error if 2 right clicks are very too close: menu disappears sometimes for some apps:\n\tIf not WinExist( MenuContext_AhkClass ) {\n\t\tSend {RButton} \t; Reopen context menu when disappears\n\t\tReturn MenuContext_RightClickAgain ; Refill the menu \n\t}\n}\n\n; Is it a right click on another file ? This means that the menu is closed and reopening...\nIf GetKeyState( \"RButton\" )\n\tReturn MenuContext_RightClickAgain ; Then refill the menu\n;TODO: Fix error when the User right-clicks on context menu, it's filled up again\n\n; Else Yes: Click into an item, but witch item ?\n\n\n;***********************************\n; \tSection: Get Clicked Item:\n;***********************************\n\n; Get position of mouse into screen:\nCoordMode, Mouse, Screen\nMouseGetPos, MouseScreenX, MouseScreenY  ; Int vars: 4 octets\n\n; POINT –> https://docs.microsoft.com/fr-fr/previous-versions/dd162805(v=vs.85)\n; Create a generic C++ POINT{x,y} with a 'ULongLong' –> 'Int64' \n; X start at the 1st ULong (right), and Y start at 2nd ULong (32th bit on left):\nMousePointScreen := x := MouseScreenX  | y := ( MouseScreenY &#x3C;&#x3C; 32 ) \n\n;Calculate DPI of special screen:  1K, 2K, 4K, 8K, etc...\nWinDPIMultiplicator := A_ScreenDPI / 96  ; 96 is the standard DPI screen: 1K (1600x900)\n\n; Check if clicked item is into the new added items:\nFor each, AddedItemInMenu in ArrayOfAdded_Items := ArrayOf_Items \n{\n\t; Click on Separator –> Disable:\n\tIf ( AddedItemInMenu.Type == MenuContext_Separator )\n\t{\n\t\t; Get Rectangle of Separator:\n\t\tVarSetCapacity( ItemRectangle, 16, 0 ) ; Create Rectangle of 16 octets: 4 corners of Int (4 octets)\n\t\t\n\t\t; Fill Rectangle: –> https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"\n\t\t\t\t\t\t\t\t,\"UPtr\", Program_Handle\n\t\t\t\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t\t\t\t,\"UInt\", AddedItemInMenu.Position ; Absolut position in the context menu\n\t\t\t\t\t\t\t\t,\"UPtr\", &#x26;ItemRectangle )\n\t\t; Is clicked on separator ?\n\t\tIf isFilledRectangle \n\t\tand isPointIntoRectangle := DllCall( \"User32\\PtInRect\", \"UPtr\", &#x26;ItemRectangle, \"Int64\", MousePointScreen )\n\t\t\tGoto Label_Wait_New_Click \n\t}\n\t\n\t; Click on added Item –> Return Value\n\tElse If ( AddedItemInMenu.Type == MenuContext_Item ) \t\t\t\t\t\n\t{\n\t\tVarSetCapacity( ItemRectangle, 16, 0 )\n\t\t; https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"  \n\t\t\t\t\t\t\t\t,\"UPtr\", Program_Handle\n\t\t\t\t\t\t\t\t,\"UPtr\", MenuContext_Handle\n\t\t\t\t\t\t\t\t,\"UInt\", AddedItemInMenu.Position \n\t\t\t\t\t\t\t\t,\"UPtr\", &#x26;ItemRectangle )\n\t\tIf isFilledRectangle \n\t\tand isPointIntoRectangle := DllCall( \"User32\\PtInRect\", \"UPtr\", &#x26;ItemRectangle, \"Int64\", MousePointScreen ) \n\t\t\tReturn AddedItemInMenu.Name\n\t}\n\t\n\t; Click on Item of Submenu –> Check each Subitem:\n\tElse If ( AddedItemInMenu.Type == MenuContext_Submenu )  \t\t\t\t\n\t{\n\t\tLoop 3 ; 3 times, because sometimes this function does not work 1 or 2 times:\n\t\t\tFor each, ItemInSubmenu in ( ItemIsSubmenu := AddedItemInMenu ).Items \n\t\t\t{\n\t\t\t\tItemPositionInMenu := A_Index\n\t\t\t\t\n\t\t\t\t; Get Rectangle for Subitem\n\t\t\t\tVarSetCapacity( ItemRectangle, 16, 0 ) \n\t\t\t\t; https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-GetMenuItemRect\n\t\t\t\tisFilledRectangle := DLLCall( \"User32\\GetMenuItemRect\"  \n\t\t\t\t\t\t\t\t\t\t,\"UPtr\", False ; Indicate Submenu, instead of window\n\t\t\t\t\t\t\t\t\t\t,\"UPtr\", ItemIsSubmenu.Handle ; Handle of the Submenu\n\t\t\t\t\t\t\t\t\t\t,\"UInt\", ItemPositionInMenu -1 ; Zero based\n\t\t\t\t\t\t\t\t\t\t,\"UPtr\", &#x26;ItemRectangle )\n\t\t\t\t\n\t\t\t\t; Get each corner of Rectangle:\n\t\t\t\tItemRectangleX1 := NumGet( &#x26;ItemRectangle, 0, \"Int\" ) ; Int –> 4 octets\n\t\t\t\tItemRectangleY1 := NumGet( &#x26;ItemRectangle, 4, \"Int\" )\n\t\t\t\tItemRectangleX2 := NumGet( &#x26;ItemRectangle, 8, \"Int\" )\n\t\t\t\tItemRectangleY2 := NumGet( &#x26;ItemRectangle, 12, \"Int\" )\n\t\t\t\t\n\t\t\t\t; Use DPI multiplicator for special screen (2K, 4K, ...):\n\t\t\t\tisMouseInto4Corners :=  ( MouseScreenX >= ItemRectangleX1 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\tand ( MouseScreenX &#x3C;= ItemRectangleX2 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\tand ( MouseScreenY >= ItemRectangleY1 *WinDPIMultiplicator ) \n\t\t\t\t\t\t\t\tand ( MouseScreenY &#x3C;= ItemRectangleY2 *WinDPIMultiplicator ) \n\t\t\t\t\n\t\t\t\t;ToolTip % \"isFilledRectangle: \" isFilledRectangle \"`n\" \"isMouseInto4Corners: \" isMouseInto4Corners \"`nX: \" ItemRectangleX1*WinDPIMultiplicator \"&#x3C;\" MouseScreenX \">\" ItemRectangleX2*WinDPIMultiplicator \"`nY: \" ItemRectangleY1*WinDPIMultiplicator \"&#x3C;\" MouseScreenY \">\" ItemRectangleY2*WinDPIMultiplicator, , , 5\n\t\t\t\t\n\t\t\t\t; Check if mouse is into this Rectangle: \n\t\t\t\tIf isFilledRectangle and isMouseInto4Corners\n\t\t\t\t{\n\t\t\t\t\t; Click on Separator ?\n\t\t\t\t\tIf ( ItemInSubmenu == MenuContext_Separator ) ; Disable Separator:\n\t\t\t\t\t\tGoto Label_Wait_New_Click ; Wait new click\n\t\t\t\t\t\n\t\t\t\t\tElse ; Standard text Subitem: \n\t\t\t\t\t\tReturn ItemInSubmenu ; Return value of item\n\t\t\t\t}\n\t\t\t}\n\t}\n\t; End of one item: this is not this item\n\tContinue ; Then check next item...\n}\n; End: For all the new items, all checked without return\n\n; Then clicked Item is probably on another item of context menu ( like 'Open' ):\nReturn MenuContext_NoClicked_AddedItem\n</code></pre>\n<p>}\n;End Fct_Get_ClickedItem_MenuContext_AddedItems</p>","noteIndex":{"id":"root","title":"Bullish Design","desc":"Design. With horns.","updated":1663735986145,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron-1"},"contentHash":"a3bba5c2b22e40ad3a99e08cdb6b9811","links":[],"anchors":{},"children":["t900xeu4quyqvn6v9adifht","oau88xk3c6kjkiu7b8f1xvi"],"parent":null,"data":{},"body":"\n\n\nWelcome to Bullish Design Works - the behind the scenes look into Bullish Design. \n\nThis is an *active* overview of current projects and a repository of documentation for past projects. The site itself is a representation of the Dendron (https://wiki.dendron.so/) vault that holds the thoughts and development that goes on behind the scenes. This is just a spit shined version of what's getting done. \n\nCheck back often to see what's new, what's changed, and what's coming next. "},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"Projects.dendron.templates"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron-1"}],"journal":{"dailyDomain":"log","name":"weekly","dateFormat":"yy.WW","addBehavior":"childOfDomain"},"scratch":{"name":"notes","dateFormat":"yyWW-c","addBehavior":"asOwnDomain"},"task":{"name":"tasks","dateFormat":"yyWW-c","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false},"publishing":{"theme":"dark","enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"assetsPrefix":"/Dendron-1","siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","siteUrl":"https://bullish-design.github.io","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"ga":{"tracking":"G-29G5DFDH0G"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}